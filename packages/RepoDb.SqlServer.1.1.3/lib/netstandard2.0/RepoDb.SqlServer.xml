<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RepoDb.SqlServer</name>
    </assembly>
    <members>
        <member name="T:RepoDb.Attributes.MicrosoftSqlServerTypeMapAttribute">
            <summary>
            An attribute used to define a mapping of .NET CLR <see cref="T:System.Type"/> into its equivalent <see cref="T:System.Data.SqlDbType"/> value.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.MicrosoftSqlServerTypeMapAttribute.#ctor(System.Data.SqlDbType)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.MicrosoftSqlServerTypeMapAttribute"/> class.
            </summary>
            <param name="dbType">A target <see cref="T:System.Data.SqlDbType"/> value.</param>
        </member>
        <member name="P:RepoDb.Attributes.MicrosoftSqlServerTypeMapAttribute.DbType">
            <summary>
            Gets a <see cref="T:System.Data.SqlDbType"/> that is currently mapped.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.MicrosoftSqlServerTypeMapAttribute.ParameterType">
            <summary>
            Gets the represented <see cref="T:System.Type"/> of the <see cref="T:Microsoft.Data.SqlClient.SqlParameter"/>.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.SystemSqlServerTypeMapAttribute">
            <summary>
            An attribute used to define a mapping of .NET CLR <see cref="T:System.Type"/> into its equivalent <see cref="T:System.Data.SqlDbType"/> value.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.SystemSqlServerTypeMapAttribute.#ctor(System.Data.SqlDbType)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.SystemSqlServerTypeMapAttribute"/> class.
            </summary>
            <param name="dbType">A target <see cref="T:System.Data.SqlDbType"/> value.</param>
        </member>
        <member name="P:RepoDb.Attributes.SystemSqlServerTypeMapAttribute.DbType">
            <summary>
            Gets a <see cref="T:System.Data.SqlDbType"/> that is currently mapped.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.SystemSqlServerTypeMapAttribute.ParameterType">
            <summary>
            Gets the represented <see cref="T:System.Type"/> of the <see cref="T:System.Data.SqlClient.SqlParameter"/>.
            </summary>
        </member>
        <member name="T:RepoDb.DbHelpers.SqlServerDbHelper">
            <summary>
            A helper class for database specially for the direct access. This class is only meant for SQL Server.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbHelpers.SqlServerDbHelper"/> class.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.#ctor(RepoDb.Interfaces.IResolver{System.String,System.Type})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbHelpers.SqlServerDbHelper"/> class.
            </summary>
            <param name="dbTypeResolver">The type resolver to be used.</param>
        </member>
        <member name="P:RepoDb.DbHelpers.SqlServerDbHelper.DbTypeResolver">
            <summary>
            Gets the type resolver used by this <see cref="T:RepoDb.DbHelpers.SqlServerDbHelper"/> instance.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.GetCommandText">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.ReaderToDbField(System.Data.Common.DbDataReader)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.ReaderToDbFieldAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.GetFields(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> of the table.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.GetFieldsAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> of the table in an asynchronous way.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.GetScopeIdentity(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Gets the newly generated identity from the database.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <returns>The newly generated identity from the database.</returns>
        </member>
        <member name="M:RepoDb.DbHelpers.SqlServerDbHelper.GetScopeIdentityAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Gets the newly generated identity from the database in an asynchronous way.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The newly generated identity from the database.</returns>
        </member>
        <member name="T:RepoDb.DbSettings.SqlServerDbSetting">
            <summary>
            A setting class used for SQL Server data provider.
            </summary>
        </member>
        <member name="M:RepoDb.DbSettings.SqlServerDbSetting.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbSettings.SqlServerDbSetting"/> class.
            </summary>
        </member>
        <member name="T:RepoDb.Resolvers.DbTypeToSqlServerStringNameResolver">
            <summary>
            A class used to resolve the <see cref="T:System.Data.DbType"/> into its equivalent SQL Server database string name.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.DbTypeToSqlServerStringNameResolver.Resolve(System.Data.DbType)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.DbType"/> of the .NET CLR Types.
            </summary>
            <param name="dbType">The type of the database.</param>
            <returns>The equivalent string name.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.SqlServerConvertFieldResolver">
            <summary>
            A class used to resolve the <see cref="T:RepoDb.Field"/> name conversion for SQL Server.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.SqlServerConvertFieldResolver.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Resolvers.SqlServerConvertFieldResolver"/> class.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.SqlServerConvertFieldResolver.#ctor(RepoDb.Interfaces.IResolver{System.Type,System.Nullable{System.Data.DbType}},RepoDb.Interfaces.IResolver{System.Data.DbType,System.String})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Resolvers.SqlServerConvertFieldResolver"/> class.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.SqlServerConvertFieldResolver.Resolve(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the converted name of the <see cref="T:RepoDb.Field"/> object for SQL Server.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> to be converted.</param>
            <param name="dbSetting">The current in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The converted name of the <see cref="T:RepoDb.Field"/> object for SQL Server.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.SqlServerDbTypeNameToClientTypeResolver">
            <summary>
            A class used to resolve the SQL Database Types into its equivalent .NET CLR Types.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.SqlServerDbTypeNameToClientTypeResolver.Resolve(System.String)">
            <summary>
            Returns the equivalent .NET CLR Types of the Database Type.
            </summary>
            <param name="dbTypeName">The name of the database type.</param>
            <returns>The equivalent .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.SqlServerBootstrap">
            <summary>
            A class used to initialize necessary objects that is connected to both <see cref="T:Microsoft.Data.SqlClient.SqlConnection"/> and <see cref="T:System.Data.SqlClient.SqlConnection"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.SqlServerBootstrap.IsInitialized">
            <summary>
            Gets the value indicating whether the initialization is completed.
            </summary>
        </member>
        <member name="M:RepoDb.SqlServerBootstrap.Initialize">
            <summary>
            Initializes all necessary settings for SqlServer.
            </summary>
        </member>
        <member name="T:RepoDb.SqlServerTableHints">
            <summary>
            A class that contains the SQL Server table hints (query optimizers) when querying a record. See Microsoft documentation <see href="https://docs.microsoft.com/en-us/sql/t-sql/queries/hints-transact-sql-table?view=sql-server-2017">here</see>.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.NoExpand">
            <summary>
            Specifies that any indexed views are not expanded to access underlying tables when the query optimizer processes the query.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ForceSeek">
            <summary>
            The query optimizer considers only index seek operations to access the table or view through any relevant index.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ForceScan">
            <summary>
            Specifies that the query optimizer use only an index scan operation as the access path to the referenced table or view. 
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.HoldLock">
            <summary>
            HOLDLOCK applies only to the table or view for which it is specified and only for the duration of the transaction 
            defined by the statement that it is used in. Is equivalent to SERIALIZABLE.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.NoLock">
            <summary>
            Specifies that dirty reads are allowed. No shared locks are issued to prevent other transactions from modifying data 
            read by the current transaction, and exclusive locks set by other transactions do not block the current transaction 
            from reading the locked data. Is equivalent to READUNCOMMITTED.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.NoWait">
            <summary>
            Instructs the Database Engine to return a message as soon as a lock is encountered on the table.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.PagLock">
            <summary>
            Takes page locks either where individual locks are ordinarily taken on rows or keys, or where a single table lock is ordinarily taken.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ReadCommitted">
            <summary>
            Specifies that read operations comply with the rules for the READ COMMITTED isolation level by using either locking or row versioning. 
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ReadCommittedLock">
            <summary>
            Specifies that read operations comply with the rules for the READ COMMITTED isolation level by using locking.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ReadPast">
            <summary>
            Specifies that the Database Engine not read rows that are locked by other transactions.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.ReadUncommitted">
            <summary>
            Specifies that dirty reads are allowed. No shared locks are issued to prevent other transactions from modifying data 
            read by the current transaction, and exclusive locks set by other transactions do not block the current transaction 
            from reading the locked data.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.RepeatableRead">
            <summary>
            Specifies that a scan is performed with the same locking semantics as a transaction running at REPEATABLE READ isolation level.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.RowLock">
            <summary>
            Specifies that row locks are taken when page or table locks are ordinarily taken. When specified in transactions operating at the SNAPSHOT 
            isolation level, row locks are not taken unless ROWLOCK is combined with other table hints that require locks, such as UPDLOCK and HOLDLOCK.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.Serializable">
            <summary>
            Makes shared locks more restrictive by holding them until a transaction is completed, instead of releasing the 
            shared lock as soon as the required table or data page is no longer needed, whether the transaction has been completed or not. The scan is 
            performed with the same semantics as a transaction running at the SERIALIZABLE isolation level. Is equivalent to HOLDLOCK.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.Snapshot">
            <summary>
            The memory-optimized table is accessed under SNAPSHOT isolation. SNAPSHOT can only be used with memory-optimized tables (not with disk-based tables).
            Applies to: SQL Server 2014 (12.x) through SQL Server 2017.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.TabLock">
            <summary>
            Specifies that the acquired lock is applied at the table level. The type of lock that is acquired depends on the statement being executed.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.TabLockX">
            <summary>
            Specifies that an exclusive lock is taken on the table.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.UpdLock">
            <summary>
            Specifies that update locks are to be taken and held until the transaction completes.
            </summary>
        </member>
        <member name="F:RepoDb.SqlServerTableHints.XLock">
            <summary>
            Specifies that exclusive locks are to be taken and held until the transaction completes.
            </summary>
        </member>
        <member name="T:RepoDb.StatementBuilders.SqlServerStatementBuilder">
            <summary>
            A class used to build a SQL Statement for SQL Server. This is the default statement builder used by the library.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.#ctor(RepoDb.Interfaces.IDbSetting)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.StatementBuilders.SqlServerStatementBuilder"/> object.
            </summary>
            <param name="dbSetting">The database settings object currently in used.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.#ctor(RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String},RepoDb.Interfaces.IResolver{System.Type,System.Type})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.StatementBuilders.SqlServerStatementBuilder"/> class.
            </summary>
            <param name="dbSetting">The database settings object currently in used.</param>
            <param name="convertFieldResolver">The resolver used when converting a field in the database layer.</param>
            <param name="averageableClientTypeResolver">The resolver used to identity the type for average.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateBatchQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for batch query operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be queried.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for batch query operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateCount(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for count operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateCountAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for count-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for insert operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateInsertAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for insert-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for merge operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.SqlServerStatementBuilder.CreateMergeAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for merge-all operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
    </members>
</doc>
